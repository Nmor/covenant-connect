/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Covenant Connect API
 * OpenAPI documentation for the Covenant Connect backend services.
 * OpenAPI spec version: 1.0.0
 */
import type {
  CreateDonationDto,
  CreateIntegrationSettingDto,
  DashboardResponseDto,
  DonationDto,
  DonationsResponseDto,
  EventDto,
  EventsResponseDto,
  GetDonationsParams,
  GetEventsParams,
  HealthControllerCheckLiveness200,
  HealthControllerCheckReadiness200,
  HomeContentDto,
  LoginDto,
  PrayerRequestDto,
  PrayerRequestsResponseDto,
  ProviderCallbackDto,
  RegisterDto,
  UpdateDonationStatusDto,
  UpdateIntegrationSettingDto
} from './schemas'
import { apiFetcher } from '../http';


export type healthControllerCheckLivenessResponse = {
  data: HealthControllerCheckLiveness200;
  status: number;
}

export const getHealthControllerCheckLivenessUrl = () => {


  return `/health/live`
}

export const healthControllerCheckLiveness = async ( options?: RequestInit): Promise<healthControllerCheckLivenessResponse> => {
return apiFetcher<Promise<healthControllerCheckLivenessResponse>>(getHealthControllerCheckLivenessUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type healthControllerCheckReadinessResponse = {
  data: HealthControllerCheckReadiness200;
  status: number;
}

export const getHealthControllerCheckReadinessUrl = () => {


  return `/health/ready`
}

export const healthControllerCheckReadiness = async ( options?: RequestInit): Promise<healthControllerCheckReadinessResponse> => {
return apiFetcher<Promise<healthControllerCheckReadinessResponse>>(getHealthControllerCheckReadinessUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type authControllerRegisterResponse = {
  data: void;
  status: number;
}

export const getAuthControllerRegisterUrl = () => {


  return `/auth/register`
}

export const authControllerRegister = async (registerDto: RegisterDto, options?: RequestInit): Promise<authControllerRegisterResponse> => {
return apiFetcher<Promise<authControllerRegisterResponse>>(getAuthControllerRegisterUrl(),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      registerDto,)
  }
);}


export type authControllerLoginResponse = {
  data: void;
  status: number;
}

export const getAuthControllerLoginUrl = () => {


  return `/auth/login`
}

export const authControllerLogin = async (loginDto: LoginDto, options?: RequestInit): Promise<authControllerLoginResponse> => {
return apiFetcher<Promise<authControllerLoginResponse>>(getAuthControllerLoginUrl(),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      loginDto,)
  }
);}


export type authControllerLogoutResponse = {
  data: void;
  status: number;
}

export const getAuthControllerLogoutUrl = () => {


  return `/auth/logout`
}

export const authControllerLogout = async ( options?: RequestInit): Promise<authControllerLogoutResponse> => {
return apiFetcher<Promise<authControllerLogoutResponse>>(getAuthControllerLogoutUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type authControllerGetSessionResponse = {
  data: void;
  status: number;
}

export const getAuthControllerGetSessionUrl = (token: string,) => {


  return `/auth/session/${token}`
}

export const authControllerGetSession = async (token: string, options?: RequestInit): Promise<authControllerGetSessionResponse> => {
return apiFetcher<Promise<authControllerGetSessionResponse>>(getAuthControllerGetSessionUrl(token),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type authControllerStartProviderLoginResponse = {
  data: void;
  status: number;
}

export const getAuthControllerStartProviderLoginUrl = (provider: string,) => {


  return `/auth/providers/${provider}/authorize`
}

export const authControllerStartProviderLogin = async (provider: string, options?: RequestInit): Promise<authControllerStartProviderLoginResponse> => {
return apiFetcher<Promise<authControllerStartProviderLoginResponse>>(getAuthControllerStartProviderLoginUrl(provider),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type authControllerProviderCallbackResponse = {
  data: void;
  status: number;
}

export const getAuthControllerProviderCallbackUrl = (provider: string,) => {


  return `/auth/providers/${provider}/callback`
}

export const authControllerProviderCallback = async (provider: string,
    providerCallbackDto: ProviderCallbackDto, options?: RequestInit): Promise<authControllerProviderCallbackResponse> => {
return apiFetcher<Promise<authControllerProviderCallbackResponse>>(getAuthControllerProviderCallbackUrl(provider),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      providerCallbackDto,)
  }
);}


/**
 * @summary List donation records with pagination.
 */
export type getDonationsResponse = {
  data: DonationsResponseDto;
  status: number;
}

export const getGetDonationsUrl = (params?: GetDonationsParams,) => {

  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/donations?${normalizedParams.toString()}`
}

export const getDonations = async (params?: GetDonationsParams, options?: RequestInit): Promise<getDonationsResponse> => {
return apiFetcher<Promise<getDonationsResponse>>(getGetDonationsUrl(params),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type donationsControllerCreateResponse = {
  data: DonationDto;
  status: number;
}

export const getDonationsControllerCreateUrl = () => {


  return `/donations`
}

export const donationsControllerCreate = async (createDonationDto: CreateDonationDto, options?: RequestInit): Promise<donationsControllerCreateResponse> => {
return apiFetcher<Promise<donationsControllerCreateResponse>>(getDonationsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      createDonationDto,)
  }
);}


export type donationsControllerUpdateStatusResponse = {
  data: DonationDto;
  status: number;
}

export const getDonationsControllerUpdateStatusUrl = (id: string,) => {


  return `/donations/${id}/status`
}

export const donationsControllerUpdateStatus = async (id: string,
    updateDonationStatusDto: UpdateDonationStatusDto, options?: RequestInit): Promise<donationsControllerUpdateStatusResponse> => {
return apiFetcher<Promise<donationsControllerUpdateStatusResponse>>(getDonationsControllerUpdateStatusUrl(id),
  {      
    ...options,
    method: 'PATCH',
    body: JSON.stringify(
      updateDonationStatusDto,)
  }
);}


export type donationsControllerHandlePaystackWebhookResponse = {
  data: void;
  status: number;
}

export const getDonationsControllerHandlePaystackWebhookUrl = () => {


  return `/donations/webhooks/paystack`
}

export const donationsControllerHandlePaystackWebhook = async ( options?: RequestInit): Promise<donationsControllerHandlePaystackWebhookResponse> => {
return apiFetcher<Promise<donationsControllerHandlePaystackWebhookResponse>>(getDonationsControllerHandlePaystackWebhookUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type donationsControllerHandleFincraWebhookResponse = {
  data: void;
  status: number;
}

export const getDonationsControllerHandleFincraWebhookUrl = () => {


  return `/donations/webhooks/fincra`
}

export const donationsControllerHandleFincraWebhook = async ( options?: RequestInit): Promise<donationsControllerHandleFincraWebhookResponse> => {
return apiFetcher<Promise<donationsControllerHandleFincraWebhookResponse>>(getDonationsControllerHandleFincraWebhookUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type donationsControllerHandleStripeWebhookResponse = {
  data: void;
  status: number;
}

export const getDonationsControllerHandleStripeWebhookUrl = () => {


  return `/donations/webhooks/stripe`
}

export const donationsControllerHandleStripeWebhook = async ( options?: RequestInit): Promise<donationsControllerHandleStripeWebhookResponse> => {
return apiFetcher<Promise<donationsControllerHandleStripeWebhookResponse>>(getDonationsControllerHandleStripeWebhookUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type donationsControllerHandleFlutterwaveWebhookResponse = {
  data: void;
  status: number;
}

export const getDonationsControllerHandleFlutterwaveWebhookUrl = () => {


  return `/donations/webhooks/flutterwave`
}

export const donationsControllerHandleFlutterwaveWebhook = async ( options?: RequestInit): Promise<donationsControllerHandleFlutterwaveWebhookResponse> => {
return apiFetcher<Promise<donationsControllerHandleFlutterwaveWebhookResponse>>(getDonationsControllerHandleFlutterwaveWebhookUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


/**
 * @summary Create a new prayer request.
 */
export type createPrayerRequestResponse = {
  data: PrayerRequestDto;
  status: number;
}

export const getCreatePrayerRequestUrl = () => {


  return `/prayer/requests`
}

export const createPrayerRequest = async ( options?: RequestInit): Promise<createPrayerRequestResponse> => {
return apiFetcher<Promise<createPrayerRequestResponse>>(getCreatePrayerRequestUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


/**
 * @summary List prayer requests for follow-up.
 */
export type getPrayerRequestsResponse = {
  data: PrayerRequestsResponseDto;
  status: number;
}

export const getGetPrayerRequestsUrl = () => {


  return `/prayer/requests`
}

export const getPrayerRequests = async ( options?: RequestInit): Promise<getPrayerRequestsResponse> => {
return apiFetcher<Promise<getPrayerRequestsResponse>>(getGetPrayerRequestsUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type prayerControllerUpdateResponse = {
  data: PrayerRequestDto;
  status: number;
}

export const getPrayerControllerUpdateUrl = (id: string,) => {


  return `/prayer/requests/${id}`
}

export const prayerControllerUpdate = async (id: string, options?: RequestInit): Promise<prayerControllerUpdateResponse> => {
return apiFetcher<Promise<prayerControllerUpdateResponse>>(getPrayerControllerUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
  }
);}


/**
 * @summary List upcoming events with pagination.
 */
export type getEventsResponse = {
  data: EventsResponseDto;
  status: number;
}

export const getGetEventsUrl = (params?: GetEventsParams,) => {

  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value === null) {
      normalizedParams.append(key, 'null');
    } else if (value !== undefined) {
      normalizedParams.append(key, value.toString());
    }
  });

  return `/events?${normalizedParams.toString()}`
}

export const getEvents = async (params?: GetEventsParams, options?: RequestInit): Promise<getEventsResponse> => {
return apiFetcher<Promise<getEventsResponse>>(getGetEventsUrl(params),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type eventsControllerCreateResponse = {
  data: EventDto;
  status: number;
}

export const getEventsControllerCreateUrl = () => {


  return `/events`
}

export const eventsControllerCreate = async ( options?: RequestInit): Promise<eventsControllerCreateResponse> => {
return apiFetcher<Promise<eventsControllerCreateResponse>>(getEventsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type eventsControllerUpdateResponse = {
  data: EventDto;
  status: number;
}

export const getEventsControllerUpdateUrl = (id: string,) => {


  return `/events/${id}`
}

export const eventsControllerUpdate = async (id: string, options?: RequestInit): Promise<eventsControllerUpdateResponse> => {
return apiFetcher<Promise<eventsControllerUpdateResponse>>(getEventsControllerUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
  }
);}


export type eventsControllerDownloadCalendarResponse = {
  data: void;
  status: number;
}

export const getEventsControllerDownloadCalendarUrl = () => {


  return `/events/calendar.ics`
}

export const eventsControllerDownloadCalendar = async ( options?: RequestInit): Promise<eventsControllerDownloadCalendarResponse> => {
return apiFetcher<Promise<eventsControllerDownloadCalendarResponse>>(getEventsControllerDownloadCalendarUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * @summary Retrieve KPI metrics for the dashboard view.
 */
export type getDashboardReportResponse = {
  data: DashboardResponseDto;
  status: number;
}

export const getGetDashboardReportUrl = () => {


  return `/reports/dashboard`
}

export const getDashboardReport = async ( options?: RequestInit): Promise<getDashboardReportResponse> => {
return apiFetcher<Promise<getDashboardReportResponse>>(getGetDashboardReportUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


/**
 * @summary Fetch marketing content for the public home page.
 */
export type getHomeContentResponse = {
  data: HomeContentDto;
  status: number;
}

export const getGetHomeContentUrl = () => {


  return `/content/home`
}

export const getHomeContent = async ( options?: RequestInit): Promise<getHomeContentResponse> => {
return apiFetcher<Promise<getHomeContentResponse>>(getGetHomeContentUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type contentControllerUpdateHomeResponse = {
  data: HomeContentDto;
  status: number;
}

export const getContentControllerUpdateHomeUrl = () => {


  return `/content/home`
}

export const contentControllerUpdateHome = async ( options?: RequestInit): Promise<contentControllerUpdateHomeResponse> => {
return apiFetcher<Promise<contentControllerUpdateHomeResponse>>(getContentControllerUpdateHomeUrl(),
  {      
    ...options,
    method: 'PUT'
    
  }
);}


export type contentControllerListSermonsResponse = {
  data: void;
  status: number;
}

export const getContentControllerListSermonsUrl = () => {


  return `/content/sermons`
}

export const contentControllerListSermons = async ( options?: RequestInit): Promise<contentControllerListSermonsResponse> => {
return apiFetcher<Promise<contentControllerListSermonsResponse>>(getContentControllerListSermonsUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type contentControllerAddSermonResponse = {
  data: void;
  status: number;
}

export const getContentControllerAddSermonUrl = () => {


  return `/content/sermons`
}

export const contentControllerAddSermon = async ( options?: RequestInit): Promise<contentControllerAddSermonResponse> => {
return apiFetcher<Promise<contentControllerAddSermonResponse>>(getContentControllerAddSermonUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type churchesControllerCreateResponse = {
  data: void;
  status: number;
}

export const getChurchesControllerCreateUrl = () => {


  return `/churches`
}

export const churchesControllerCreate = async ( options?: RequestInit): Promise<churchesControllerCreateResponse> => {
return apiFetcher<Promise<churchesControllerCreateResponse>>(getChurchesControllerCreateUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type churchesControllerListResponse = {
  data: void;
  status: number;
}

export const getChurchesControllerListUrl = () => {


  return `/churches`
}

export const churchesControllerList = async ( options?: RequestInit): Promise<churchesControllerListResponse> => {
return apiFetcher<Promise<churchesControllerListResponse>>(getChurchesControllerListUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type churchesControllerGetByIdResponse = {
  data: void;
  status: number;
}

export const getChurchesControllerGetByIdUrl = (id: string,) => {


  return `/churches/${id}`
}

export const churchesControllerGetById = async (id: string, options?: RequestInit): Promise<churchesControllerGetByIdResponse> => {
return apiFetcher<Promise<churchesControllerGetByIdResponse>>(getChurchesControllerGetByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type churchesControllerUpdateResponse = {
  data: void;
  status: number;
}

export const getChurchesControllerUpdateUrl = (id: string,) => {


  return `/churches/${id}`
}

export const churchesControllerUpdate = async (id: string, options?: RequestInit): Promise<churchesControllerUpdateResponse> => {
return apiFetcher<Promise<churchesControllerUpdateResponse>>(getChurchesControllerUpdateUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
  }
);}


export type emailControllerListProvidersResponse = {
  data: void;
  status: number;
}

export const getEmailControllerListProvidersUrl = () => {


  return `/email/providers`
}

export const emailControllerListProviders = async ( options?: RequestInit): Promise<emailControllerListProvidersResponse> => {
return apiFetcher<Promise<emailControllerListProvidersResponse>>(getEmailControllerListProvidersUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type emailControllerUpsertProviderResponse = {
  data: void;
  status: number;
}

export const getEmailControllerUpsertProviderUrl = () => {


  return `/email/providers`
}

export const emailControllerUpsertProvider = async ( options?: RequestInit): Promise<emailControllerUpsertProviderResponse> => {
return apiFetcher<Promise<emailControllerUpsertProviderResponse>>(getEmailControllerUpsertProviderUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type emailControllerActivateResponse = {
  data: void;
  status: number;
}

export const getEmailControllerActivateUrl = (id: string,) => {


  return `/email/providers/${id}/activate`
}

export const emailControllerActivate = async (id: string, options?: RequestInit): Promise<emailControllerActivateResponse> => {
return apiFetcher<Promise<emailControllerActivateResponse>>(getEmailControllerActivateUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
  }
);}


export type emailControllerSendResponse = {
  data: void;
  status: number;
}

export const getEmailControllerSendUrl = () => {


  return `/email/send`
}

export const emailControllerSend = async ( options?: RequestInit): Promise<emailControllerSendResponse> => {
return apiFetcher<Promise<emailControllerSendResponse>>(getEmailControllerSendUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


export type integrationsControllerListResponse = {
  data: void;
  status: number;
}

export const getIntegrationsControllerListUrl = () => {


  return `/integrations`
}

export const integrationsControllerList = async ( options?: RequestInit): Promise<integrationsControllerListResponse> => {
return apiFetcher<Promise<integrationsControllerListResponse>>(getIntegrationsControllerListUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type integrationsControllerCreateResponse = {
  data: void;
  status: number;
}

export const getIntegrationsControllerCreateUrl = () => {


  return `/integrations`
}

export const integrationsControllerCreate = async (createIntegrationSettingDto: CreateIntegrationSettingDto, options?: RequestInit): Promise<integrationsControllerCreateResponse> => {
return apiFetcher<Promise<integrationsControllerCreateResponse>>(getIntegrationsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    body: JSON.stringify(
      createIntegrationSettingDto,)
  }
);}


export type integrationsControllerGetResponse = {
  data: void;
  status: number;
}

export const getIntegrationsControllerGetUrl = (provider: string,) => {


  return `/integrations/${provider}`
}

export const integrationsControllerGet = async (provider: string, options?: RequestInit): Promise<integrationsControllerGetResponse> => {
return apiFetcher<Promise<integrationsControllerGetResponse>>(getIntegrationsControllerGetUrl(provider),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type integrationsControllerUpdateResponse = {
  data: void;
  status: number;
}

export const getIntegrationsControllerUpdateUrl = (provider: string,) => {


  return `/integrations/${provider}`
}

export const integrationsControllerUpdate = async (provider: string,
    updateIntegrationSettingDto: UpdateIntegrationSettingDto, options?: RequestInit): Promise<integrationsControllerUpdateResponse> => {
return apiFetcher<Promise<integrationsControllerUpdateResponse>>(getIntegrationsControllerUpdateUrl(provider),
  {      
    ...options,
    method: 'PUT',
    body: JSON.stringify(
      updateIntegrationSettingDto,)
  }
);}


export type integrationsControllerRemoveResponse = {
  data: void;
  status: number;
}

export const getIntegrationsControllerRemoveUrl = (provider: string,) => {


  return `/integrations/${provider}`
}

export const integrationsControllerRemove = async (provider: string, options?: RequestInit): Promise<integrationsControllerRemoveResponse> => {
return apiFetcher<Promise<integrationsControllerRemoveResponse>>(getIntegrationsControllerRemoveUrl(provider),
  {      
    ...options,
    method: 'DELETE'
    
  }
);}


export type tasksControllerListResponse = {
  data: void;
  status: number;
}

export const getTasksControllerListUrl = () => {


  return `/tasks`
}

export const tasksControllerList = async ( options?: RequestInit): Promise<tasksControllerListResponse> => {
return apiFetcher<Promise<tasksControllerListResponse>>(getTasksControllerListUrl(),
  {      
    ...options,
    method: 'GET'
    
  }
);}


export type tasksControllerEnqueueResponse = {
  data: void;
  status: number;
}

export const getTasksControllerEnqueueUrl = () => {


  return `/tasks`
}

export const tasksControllerEnqueue = async ( options?: RequestInit): Promise<tasksControllerEnqueueResponse> => {
return apiFetcher<Promise<tasksControllerEnqueueResponse>>(getTasksControllerEnqueueUrl(),
  {      
    ...options,
    method: 'POST'
    
  }
);}


